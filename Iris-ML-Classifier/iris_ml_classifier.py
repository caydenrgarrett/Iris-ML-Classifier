# -*- coding: utf-8 -*-
"""Iris-ML-Classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1urpl15tFwXO1YvCOpoRSpnUCwLJKA8dw

## Importing libraries, frameworks, and modules
"""

from pandas import read_csv
import pandas as pd
from pandas.plotting import scatter_matrix
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

"""## Loading the dataset and looking at the shape of the property"""

url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
names = ['Sepal-Length', 'Sepal-Width', 'Petal-Length', 'Petal-Width', 'Class']
dataset = pd.read_csv(url, names=names)

print(dataset.shape)

# Preview of first 20 lines
print(dataset.head(20))

"""## Providing a statistical summary of the dataset"""

# Descriptions
print(dataset.describe())

# Class Distributions
print(dataset.groupby('Class').size())

"""# Visualizing dataset using two types of plots:
1. Univariate Plot for better understanding each attribute.
2. Multivariate Plots to get a better understanding of relationships between attributes.
"""

# Box and Whisker Plots
dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
plt.show()

# Creating histograms of each output to get a better idea of each distribution
dataset.hist()
plt.show()

"""# Multivariate Plots"""

from pandas.plotting import scatter_matrix

scatter_matrix(dataset)
plt.show()

"""# Evaluation of Algorithms <br>
Create models of the data and test the accuracy on unseen data.
1. Create a validation set
2. Setup a test-harness to use 10 fold cross validation
3. Build models to predict species of different measurements
4. Seelect the best model

"""

array = dataset.values
X = array[:,0:4]
y = array[:,4]
X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, random_state=1)

"""# Building the Models <br>
We are going to test out 6 different algorithms
1. Logistic Regression
2. Linear Discriminant Analysis
3. K-Nearest Neighbors
4. Classification & Regression Trees
5. Gaussian Naive-Bayes
6. Support Vector Machines
"""

# Spot Check Algo's
models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))

# Evaluate the model in turn
results = []
names = []
for name, model in models:
	kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)
	cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')
	results.append(cv_results)
	names.append(name)
	print('%s: %f (%f)' % (name, cv_results.mean(), cv_results.std()))

# Comparing the algorithms
plt.boxplot(results, labels=names)
plt.title("Comparison of Algorithms")
plt.show()

"""## Making predictions on the validation dataset"""

model = SVC(gamma="auto")
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)

# Evaluate Predictions
print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions))